#! /usr/bin/env python
# -*- coding: utf-8 -*-
import sqlite3
import menu
import settings
import functions as func
import telebot
from telebot import types
import time
import datetime
import random
import threading
import config
from PIL import Image

import traceback

buy_dict = {}
balance_dict = {}
admin_sending_messages_dict = {}
product_dict = {}
download_dict = {}


def start_bot():
    bot = telebot.TeleBot(config.config('bot_token'), threaded=True, num_threads=300)

    # Command start
    @bot.message_handler(commands=['start'])
    def handler_start(message):
        chat_id = message.chat.id
        resp = func.first_join(user_id=chat_id, name=message.from_user.username, code=message.text[7:])

        with open('welcome.jpg', 'rb') as photo:
            bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {}!'.format(message.from_user.first_name,),
                reply_markup=menu.main_menu()
            )

    # Command admin
    @bot.message_handler(commands=['admin'])
    def handler_admin(message):
        chat_id = message.chat.id
        if str(chat_id) in func.admin_id_manager() or str(chat_id) in func.admin_id_own():
            bot.send_message(chat_id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=menu.admin_menu)


    @bot.message_handler(content_types=['text'])
    def send_message(message):

        if str(message.chat.id) in func.ban():
            print('spam')
        else:
            chat_id = message.chat.id
            first_name = message.from_user.first_name
            username = message.from_user.username

            if message.text in func.btn_menu_list():
                conn = sqlite3.connect('base.db')
                cursor = conn.cursor()

                base = cursor.execute(f'SELECT * FROM buttons WHERE name = "{message.text}"').fetchone()

                with open(f'{base[2]}.jpg', 'rb') as photo:
                    bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        caption=base[1]
                    )

            if message.text == menu.main_menu_btn[0]:
                try:
                    bot.send_message(
                            chat_id=chat_id,
                            text=func.info_numbers(chat_id),
                            reply_markup=func.buy_number_menu()
                        )
                except: pass

            if message.text == menu.main_menu_btn[1]:
                try:
                    info = func.profile(chat_id)
                    msg = settings.profile.format(
                            id=info[0],
                            login=f'@{info[1]}',
                            data=info[2][:19],
                            balance=info[5]
                        ),
                    bot.send_message(
                        chat_id=chat_id,
                        text=msg)
                except Exception as e: pass


            if message.text == menu.main_menu_btn[2]:
                bot.send_message(
                    chat_id=chat_id,
                    text=settings.info,
                    reply_markup=menu.main_menu(),
                    parse_mode='html'
                )

            if message.text == menu.main_menu_btn[3]:
                try:
                    resp = func.replenish_balance(chat_id)
                    bot.send_message(chat_id=chat_id,
                                        text=resp[0],
                                        reply_markup=resp[1],
                                        parse_mode='html')
                except Exception as e: print(f"error: {e}")

            if message.text == menu.main_menu_btn[4]:
                try:
                    ref_code = func.check_ref_code(chat_id)
                    bot.send_message(
                        chat_id=chat_id,
                        text=f'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å\n\n'
                            f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                            f'https://teleg.run/{config.config("bot_login")}?start={ref_code}\n'
                            f'https://t.me/{config.config("bot_login")}?start={ref_code}\n\n'
                            f'–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ - {func.check_all_profit_user(chat_id)} ‚ÇΩ\n'
                            f'–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ - {func.top_ref_invite(chat_id)} –ª—é–¥–µ–π\n\n'
                            f'<i>–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {config.config("ref_percent")} % –æ—Ç —Å—É–º–º—ã –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞</i>',
                        reply_markup=menu.main_menu(),
                        parse_mode='html'
                        )
                except Exception as e: print(e)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    @bot.callback_query_handler(func=lambda call: True)
    def handler_call(call):
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        try:

            if call.data in ['adds2', 'adds1', 'adds3', 'buy_numbers', 'info', 'profile', 'replenish_balance', 'referral_web']:
                bot.send_message(
                    chat_id=chat_id,
                    text='–£ –Ω–∞—Å –Ω–æ–≤–æ–µ –º–µ–Ω—é üëá',
                    reply_markup=menu.main_menu()
                )

            if call.data == 'email_sending':
                    bot.send_message(
                        chat_id=chat_id,
                        text='–í—ã–±–∏—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
                        reply_markup=menu.email_sending()
                    )

            if call.data == 'email_sending_photo':
                    msg = bot.send_message(
                        chat_id=chat_id,
                        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!',
                        )
                    
                    bot.clear_step_handler_by_chat_id(chat_id)
                    bot.register_next_step_handler(msg, email_sending_photo)

            if call.data == 'email_sending_text':
                    msg = bot.send_message(
                        chat_id=chat_id,
                        text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
                        )
                    
                    bot.clear_step_handler_by_chat_id(chat_id)
                    bot.register_next_step_handler(msg, admin_sending_messages)
            if 'get_code_' in call.data:
                code = func.get_code(call.data[9:])
                if str(code[0]) == 'STATUS_OK':
                    bot.send_message(
                        chat_id=chat_id,
                        text=f'–°–¢–ê–¢–£–°: {code[0]}\n'
                            f'–ö–û–î: <code>{code[1]}</code>',
                        reply_markup=code[2],
                        parse_mode='html'
                    )
                else:
                    bot.send_message(
                        chat_id=chat_id,
                        text='C–º—Å –Ω–µ –ø—Ä–∏—à–ª–∞'
                    )

            if 'buynum_' in call.data: 
                if func.check_balance(chat_id, func.check_price_number(call.data[7:])) == 1:
                    info = func.Buy(chat_id)
                    buy_dict[chat_id] = info
                    info = buy_dict[chat_id]
                    info.code = call.data[7:]

                    try:
                        info = buy_dict[chat_id]
                        resp = func.buy_number(info)

                        if resp[0] == True:
                            bot.send_message(
                                chat_id=chat_id,
                                text=f'–°–µ—Ä–≤–∏—Å: {func.get_service_name(call.data[7:])}\n–í–∞—à –Ω–æ–º–µ—Ä: {resp[1]}\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å–º—Å\n\n<i>–ï—Å–ª–∏ —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —Ç–æ –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –∞—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!!!</i>',
                                parse_mode='html'
                            )
                            threading.Thread(target=buy_th(chat_id, resp[2], resp[1], resp[3], call.from_user.first_name, call.from_user.username, info.code))
                        else:
                            bot.send_message(
                                chat_id=chat_id,
                                text=f'<i>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!</i>',
                                parse_mode='html'
                            )
                    except Exception as e:
                        print(e)
                else:
                    bot.send_message(
                        chat_id=chat_id,
                        text='–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–∞—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
                    )

            if call.data == 'exit_to_menu':
                bot.send_message(
                    chat_id=chat_id,
                    text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                    reply_markup=menu.main_menu()
                )

            if call.data == 'btn_ok':
                bot.delete_message(chat_id, message_id)

            # Admin menu
            if call.data == 'admin_info':
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=func.admin_info(),
                    reply_markup=menu.admin_menu
                )

            if call.data == 'exit_admin_menu':
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text='–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                    reply_markup=menu.main_menu()
                )

            if call.data == 'back_to_admin_menu':
                bot.send_message(
                    chat_id=chat_id,
                    text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞'
                )

            if call.data == 'cancel_payment':
                func.cancel_payment(chat_id)
                bot.edit_message_text(chat_id=chat_id,
                                    message_id=message_id,
                                    text='‚ùï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')

            if call.data == 'check_payment':
                check = func.check_payment(chat_id)
                if check[0] == 1:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞\n–°—É–º–º–∞ - {check[1]} —Ä—É–±')

                if check[0] == 0:
                    bot.send_message(chat_id=chat_id,
                                    text='‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                                    reply_markup=menu.to_close)

            if call.data == 'to_close':
                bot.delete_message(chat_id=chat_id,
                                message_id=message_id)

            if call.data == 'give_balance':
                msg = bot.send_message(chat_id=chat_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å')

                bot.register_next_step_handler(msg, give_balance)

            if call.data == 'admin_sending_messages':
                msg = bot.send_message(chat_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
                bot.register_next_step_handler(msg, admin_sending_messages)
            
            if call.data == 'admin_top_ref':
                bot.send_message(
                    chat_id=chat_id,
                    text=func.admin_top_ref(),
                    parse_mode='html'
                )

            if 'num_end_' in call.data:
                if func.cancel_number(call.data[8:]) == True:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text='–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
                    )

            if 'num_req_' in call.data:
                code = call.data.split('_')[2]
                number = call.data.split('_')[3]
                if func.number_iteration(code) == True:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=f'–î–ª—è –Ω–æ–º–µ—Ä–∞ <code>+{number}</code> –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–º—Å',
                        parse_mode='html'
                    )

                    threading.Thread(target=buy_th_2(chat_id, code, number, call.from_user.first_name, call.from_user.username))

            if call.data in func.service_list():
                bot.send_message(
                    chat_id=chat_id,
                    text=func.get_info_number(call.data, chat_id),
                    reply_markup=func.get_menu(call.data)
                )

            if call.data == 'admin_buttons':
                bot.send_message(
                        chat_id=chat_id,
                        text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫',
                        reply_markup=menu.admin_buttons
                    )
            

            if call.data == 'admin_buttons_del':
                msg = bot.send_message(
                        chat_id=chat_id,
                        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n{func.list_btns()}'
                    )
                
                bot.clear_step_handler_by_chat_id(chat_id)
                bot.register_next_step_handler(msg, admin_buttons_del)


            if call.data == 'admin_buttons_add':
                msg = bot.send_message(
                        chat_id=chat_id,
                        text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏'
                    )
                
                bot.clear_step_handler_by_chat_id(chat_id)
                bot.register_next_step_handler(msg, admin_buttons_add)

            
            if call.data == 'admin_numbers':
                bot.send_message(
                        chat_id=chat_id,
                        text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–æ–≤',
                        reply_markup=menu.admin_numbers
                    )


            if call.data == 'admin_numbers_set_price':
                msg = bot.send_message(
                        chat_id=chat_id,
                        text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞:\n\n{func.service_list_name()}'
                    )
                
                bot.clear_step_handler_by_chat_id(chat_id)
                bot.register_next_step_handler(msg, admin_numbers_set_price)


            if call.data == 'email_sending_info':
                bot.send_message(
                    chat_id=chat_id,
                    text="""
–î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å:

1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""")
                bot.send_message(
                        chat_id=chat_id,
                        text="""
–¢–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:

1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""",
                    parse_mode='html'
                    )

            if call.data == 'admin_settings':
                if str(chat_id) in func.admin_id_own():
                    bot.send_message(
                            chat_id=chat_id,
                            text=f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
                            reply_markup=menu.admin_bot_settings
                        )
            
            if call.data == 'admin_bot_settings_ref':
                if str(chat_id) in func.admin_id_own():
                    msg = bot.send_message(
                            chat_id=chat_id,
                            text=f'üîß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ. —Å–∏—Å—Ç–µ–º—ã'
                        )
                    
                    bot.clear_step_handler_by_chat_id(chat_id)
                    bot.register_next_step_handler(msg, admin_bot_settings_ref)


            if call.data == 'admin_bot_settings_api_sms':
                if str(chat_id) in func.admin_id_own():
                    msg = bot.send_message(
                            chat_id=chat_id,
                            text=f'üîß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API SMSHUB'
                        )
                    
                    bot.clear_step_handler_by_chat_id(chat_id)
                    bot.register_next_step_handler(msg, admin_bot_settings_api_sms)

            
            if call.data == 'admin_bot_settings_qiwi':
                if str(chat_id) in func.admin_id_own():
                    bot.send_message(
                            chat_id=chat_id,
                            text=f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ QIWI',
                            reply_markup=menu.admin_bot_settings_qiwi_menu
                        )

            
            if call.data == 'admin_bot_settings_qiwi_number':
                if str(chat_id) in func.admin_id_own():
                    msg = bot.send_message(
                            chat_id=chat_id,
                            text=f'üîß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π QIWI –Ω–æ–º–µ—Ä'
                        )
                    
                    bot.clear_step_handler_by_chat_id(chat_id)
                    bot.register_next_step_handler(msg, admin_bot_settings_qiwi_number)


            if call.data == 'admin_bot_settings_qiwi_token':
                if str(chat_id) in func.admin_id_own():
                    msg = bot.send_message(
                            chat_id=chat_id,
                            text=f'üîß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π QIWI —Ç–æ–∫–µ–Ω'
                        )
                    
                    bot.clear_step_handler_by_chat_id(chat_id)
                    bot.register_next_step_handler(msg, admin_bot_settings_qiwi_token)
        
        except Exception as e:
            print(f'CRASH: {e}')


    def admin_bot_settings_qiwi_token(message):
        try:
            config.edit_config('qiwi_token', message.text)

            bot.send_message(
                chat_id=message.chat.id,
                text=f'üîß QIWI —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}',
                reply_markup=menu.admin_bot_settings_qiwi_menu
            )
        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def admin_bot_settings_qiwi_number(message):
        try:
            config.edit_config('qiwi_number', message.text)

            bot.send_message(
                chat_id=message.chat.id,
                text=f'üîß QIWI –Ω–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}',
                reply_markup=menu.admin_bot_settings_qiwi_menu
            )
        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    
    def admin_bot_settings_api_sms(message):
        try:
            config.edit_config('api_smshub', message.text)

            bot.send_message(
                chat_id=message.chat.id,
                text=f'üîß API SMSHUB –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}',
                reply_markup=menu.admin_bot_settings
            )
        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

        
    def admin_bot_settings_ref(message):
        try:
            ref = int(message.text)
            config.edit_config('ref_percent', message.text)

            bot.send_message(
                chat_id=message.chat.id,
                text=f'üîß –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ. —Å–∏—Å—Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}',
                reply_markup=menu.admin_bot_settings
            )
        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def sending_check():
        while True:
            try:
                info = func.sending_check()

                if info != False:
                    conn = sqlite3.connect('base.db')
                    cursor = conn.cursor()

                    cursor.execute(f'SELECT * FROM users')
                    row = cursor.fetchall()

                    start_time = time.time()
                    amount_message = 0
                    amount_bad = 0

                    if info[0] == 'text':
                        try:
                            bot.send_message(
                                chat_id=func.admin_id_manager().split(':')[0],
                                text=f'‚úÖ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏')
                        except: pass

                        for i in range(len(row)):
                            try:
                                bot.send_message(row[i][0], info[1], parse_mode='html')
                                amount_message += 1
                            except Exception as e:
                                amount_bad += 1
                        
                        sending_time = time.time() - start_time

                        try:
                            bot.send_message(
                                chat_id=func.admin_id_manager().split(':')[0],
                                text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                                f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                                f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                                f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                                
                                )              
                        except:
                            print('ERROR ADMIN SENDING')
                        try:
                            bot.send_message(
                                chat_id=func.admin_id_manager().split(':')[1],
                                text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                                f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                                f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                                f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                                
                                )              
                        except:
                            print('ERROR ADMIN SENDING')

                    elif info[0] == 'photo':
                        try:
                            bot.send_message(
                                chat_id=func.admin_id_manager().split(':')[0],
                                text=f'‚úÖ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏')
                        except: pass

                        
                        for i in range(len(row)):
                            try:
                                with open(f'photo/{info[2]}.jpg', 'rb') as photo:
                                    bot.send_photo(
                                        chat_id=row[i][0],
                                        photo=photo,
                                        caption=info[1],
                                        parse_mode='html')
                                amount_message += 1
                            except:
                                amount_bad += 1
                        
                        sending_time = time.time() - start_time

                        try:
                            bot.send_message(
                                chat_id=func.admin_id_manager().split(':')[0],
                                text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                                f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                                f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                                f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                                
                                )              
                        except:
                            print('ERROR ADMIN SENDING')
                        try:
                            bot.send_message(
                                chat_id=func.admin_id_manager().split(':')[1],
                                text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                                f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                                f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                                f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                                
                                )              
                        except:
                            print('ERROR ADMIN SENDING')
                else:
                    time.sleep(15)
            except Exception as e: pass


    def buy_th_2(chat_id, cd, number, first_name, username):
        try:
            start_time = time.time()
            while True:
                code = func.get_code(cd)
                if str(code[0]) == 'STATUS_OK':
                    bot.send_message(
                        chat_id=chat_id,
                        text=f'–ù–æ–º–µ—Ä: <code>{number}</code>\n'
                            f'–ü–û–í–¢–û–†–ù–´–ô –ö–û–î: <code>{code[1]}</code>',
                        reply_markup=menu.buy_num_menu,
                        parse_mode='html'
                    )
                    print('buy_th_2 good')

                    break
                else:
                    time.sleep(3)

                sending_time = time.time() - start_time

                print(f'buy_th_2 bad | time {sending_time}')

                if sending_time >= 600:
                    bot.send_message(
                        chat_id=chat_id,
                        text=f'–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ <code>{number}</code> –Ω–µ –ø—Ä–∏—à–µ–ª, —Ä–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                        reply_markup=menu.back_to_m_menu,
                        parse_mode='html'
                    )
                    
                    if func.cancel_number(cd) == True:
                        print('buy_th_2 CANCEL')

                    break

        except:
            print('buy_th_2 ERROR')


    def buy_th(chat_id, cd, number, price, first_name, username, info_code):
        try:
            start_time = time.time()
            while True:
                code = func.get_code(cd)
                if str(code[0]) == 'STATUS_OK':
                    bot.send_message(
                        chat_id=chat_id,
                        text=f'–ù–æ–º–µ—Ä: <code>{number}</code>\n'
                            f'–ö–û–î: <code>{code[1]}</code>',
                        reply_markup=menu.buy_num_menu(cd, number),
                        parse_mode='html'
                    )
                    print('buy_th good')

                    try:
                        func.number_logs(chat_id, first_name, username, f'+{number}', price, info_code, info_code)
                    except Exception as e: print(e)

                    break
                else:
                    time.sleep(1)

                sending_time = time.time() - start_time

                print(f'buy_th bad | time {sending_time}')

                if sending_time >= 300:
                    bot.send_message(
                        chat_id=chat_id,
                        text=f'–ö–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ <code>{number}</code> –Ω–µ –ø—Ä–∏—à–µ–ª, –≤–∞–º –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–µ–Ω—å–≥–∏',
                        reply_markup=menu.back_to_m_menu,
                        parse_mode='html'
                    )
                    
                    if func.cancel_number(cd) == True:
                        func.update_user_balance(chat_id, price)
                        print('buy_th CANCEL')
                    

                    try:
                        func.number_logs(chat_id, first_name, username, f'+{number}', 0, info_code, 0)
                    except Exception as e: traceback.print_exc(e)
                    break

        except:
            print('buy_th ERROR')


    def give_balance(message):
        try:
            balance = func.GiveBalance(message.text)
            balance_dict[message.chat.id] = balance

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏–∑–º–µ–Ω–∏—Ç—Å—è –±–∞–ª–∞–Ω—Å(–∫ –±–∞–ª–∞–Ω—Å—É –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è —ç—Ç–∞ —Å—É–º–º–∞, –∞ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –Ω–µ—ë)')

            bot.register_next_step_handler(msg, give_balance_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu())

    def give_balance_2(message):
        try:
            balance = balance_dict[message.chat.id]
            balance.balance = message.text
            msg = bot.send_message(chat_id=message.chat.id,
                                   text=f'ID - {balance.login}\n'
                                        f'–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ - {balance.balance}\n'
                                        f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ +')

            bot.register_next_step_handler(msg, give_balance_3)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu())

    def give_balance_3(message):
        try:
            balance = balance_dict[message.chat.id]
            if message.text == '+':
                func.give_balance(balance)
                bot.send_message(chat_id=message.chat.id,
                                 text='‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')

        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu())


    def email_sending_photo(message):
        chat_id = message.chat.id
        try:
            file_info = bot.get_file(message.photo[len(message.photo)-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            admin_sending = func.Admin_sending_messages(message.chat.id)
            func.admin_sending_messages_dict[message.chat.id] = admin_sending

            admin_sending = func.admin_sending_messages_dict[message.chat.id]
            admin_sending.photo = random.randint(111111, 999999)
            admin_sending.type_sending = 'photo'

            with open(f'photo/{admin_sending.photo}.jpg', 'wb') as new_file:
                new_file.write(downloaded_file)

            msg = bot.send_message(
                chat_id=chat_id,
                text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏'
            )

            bot.register_next_step_handler(msg, email_sending_photo2)
        except Exception as e:
            traceback.print_exc(e)
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def email_sending_photo2(message):
        chat_id = message.chat.id
        try:

            admin_sending = func.admin_sending_messages_dict[message.chat.id]
            admin_sending.text = message.text

            with open(f'photo/{admin_sending.photo}.jpg', 'rb') as photo:
                bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=admin_sending.text
                )
            
            msg = bot.send_message(
                chat_id=chat_id,
                text='–í—ã–±–∏—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                reply_markup=menu.admin_sending
            )

            bot.register_next_step_handler(msg, email_sending_photo3)
        except:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def email_sending_photo3(message):
        chat_id = message.chat.id
        try:
            admin_sending = func.admin_sending_messages_dict[message.chat.id]
            if message.text in menu.admin_sending_btn:
                if message.text == menu.admin_sending_btn[0]: # –ù–∞—á–∞—Ç—å
                    conn = sqlite3.connect('base.db')
                    cursor = conn.cursor()
                    cursor.execute(f'SELECT * FROM users')
                    row = cursor.fetchall()
                    start_time = time.time()
                    amount_message = 0
                    amount_bad = 0

                    try:
                        bot.send_message(
                            chat_id=func.admin_id_manager().split(':')[0],
                            text=f'‚úÖ –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É',
                            reply_markup=menu.admin_menu)
                    except: pass

                    
                    for i in range(len(row)):
                        try:
                            with open(f'photo/{admin_sending.photo}.jpg', 'rb') as photo:
                                bot.send_photo(
                                    chat_id=row[i][0],
                                    photo=photo,
                                    caption=admin_sending.text,
                                    parse_mode='html')
                            amount_message += 1
                        except:
                            amount_bad += 1
                    
                    sending_time = time.time() - start_time

                    try:
                        bot.send_message(
                            chat_id=func.admin_id_manager().split(':')[0],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                            f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                            f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                            f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                            
                            )              
                    except:
                        print('ERROR ADMIN SENDING')
                    try:
                        bot.send_message(
                            chat_id=func.admin_id_manager().split(':')[1],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                            f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                            f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                            f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                            
                            )              
                    except:
                        print('ERROR ADMIN SENDING')
                elif message.text == menu.admin_sending_btn[1]: # –û—Ç–ª–æ–∂–∏—Ç—å
                    msg = bot.send_message(
                        chat_id=chat_id,
                        text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–ï–ù–¨:–ß–ê–°–û–í:–ú–ò–ù–£–¢\n

–ù–∞–ø—Ä–∏–º–µ—Ä 18:14:10 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 18 —á–∏—Å–ª–∞ –≤ 14:10
"""
                    )

                    bot.register_next_step_handler(msg, set_down_sending)
                elif message.text == menu.admin_sending_btn[2]:
                    bot.send_message(
                        message.chat.id, 
                        text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 
                        reply_markup=menu.main_menu
                    )
                    bot.send_message(
                        message.chat.id, 
                        text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', 
                        reply_markup=menu.admin_menu
                    )
            else:   
                msg = bot.send_message(
                    message.chat.id, 
                    text='–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', 
                    reply_markup=menu.admin_sending)

                bot.register_next_step_handler(msg, email_sending_photo3)
        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    
    def set_down_sending(message):
        admin_sending = func.admin_sending_messages_dict[message.chat.id]
        date = message.text
        admin_sending.date = date

        if int(date.split(':')[0]) > 0 and int(date.split(':')[0]) < 33:
            if int(date.split(':')[1]) >= 0 and int(date.split(':')[1]) <= 24:
                if int(date.split(':')[2]) >= 0 and int(date.split(':')[2]) < 61:
                    msg = bot.send_message(
                        chat_id=message.chat.id,
                        text=f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {date} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +'
                    )

                    bot.register_next_step_handler(msg, set_down_sending_2)

    def set_down_sending_2(message):
        if message.text == '+':
            admin_sending = func.admin_sending_messages_dict[message.chat.id]

            func.add_sending(admin_sending)

            bot.send_message(
                chat_id=message.chat.id,
                text=f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ {admin_sending.date}',
                reply_markup=menu.admin_menu
            )
        else:
            bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=menu.admin_menu)

    def admin_sending_messages(message):
        admin_sending = func.Admin_sending_messages(message.chat.id)
        func.admin_sending_messages_dict[message.chat.id] = admin_sending

        admin_sending = func.admin_sending_messages_dict[message.chat.id]
        admin_sending.text = message.text

        msg = bot.send_message(
            chat_id=message.chat.id,
            text='–í—ã–±–∏—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            reply_markup=menu.admin_sending)

        bot.register_next_step_handler(msg, admin_sending_messages_2)

    def numberrs_buy(textt):
        func.admin_rass(textt)

    def admin_sending_messages_2(message):
        chat_id = message.chat.id

        conn = sqlite3.connect('base.db')
        cursor = conn.cursor()

        admin_sending = func.admin_sending_messages_dict[message.chat.id]
        admin_sending.type_sending = 'text'

        if message.text in menu.admin_sending_btn:
            if message.text == menu.admin_sending_btn[0]: # –ù–∞—á–∞—Ç—å
                cursor.execute(f'SELECT * FROM users')
                row = cursor.fetchall()
                start_time = time.time()
                amount_message = 0
                amount_bad = 0

                try:
                    bot.send_message(
                        chat_id=func.admin_id_manager().split(':')[0],
                        text=f'‚úÖ –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É',
                        reply_markup=menu.admin_menu)
                except: pass

                for i in range(len(row)):
                    try:
                        bot.send_message(row[i][0], admin_sending.text, parse_mode='html')
                        amount_message += 1
                    except Exception as e:
                        amount_bad += 1
                
                sending_time = time.time() - start_time

                try:
                    bot.send_message(
                        chat_id=func.admin_id_manager().split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                        f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                        f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                        f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                        
                        )              
                except:
                    print('ERROR ADMIN SENDING')
                try:
                    bot.send_message(
                        chat_id=func.admin_id_manager().split(':')[1],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                        f'‚ùï –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                        f'‚ùï –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                        f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                        
                        )              
                except:
                    print('ERROR ADMIN SENDING')
            elif message.text == menu.admin_sending_btn[1]: # –û—Ç–ª–æ–∂–∏—Ç—å
                msg = bot.send_message(
                    chat_id=chat_id,
                    text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–ï–ù–¨:–ß–ê–°–û–í:–ú–ò–ù–£–¢\n

–ù–∞–ø—Ä–∏–º–µ—Ä 18:14:10 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 18 —á–∏—Å–ª–∞ –≤ 14:10
"""
                )
                bot.register_next_step_handler(msg, set_down_sending)
            if message.text == menu.admin_sending_btn[2]:
                bot.send_message(
                    message.chat.id, 
                    text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 
                    reply_markup=menu.main_menu
                )
                bot.send_message(
                    message.chat.id, 
                    text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', 
                    reply_markup=menu.admin_menu
                )
            else:   
                msg = bot.send_message(
                    message.chat.id, 
                    text='–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', 
                    reply_markup=menu.admin_sending)
    start = func.get_numm()
    numberrs_buy(start)
    def admin_buttons_add(message):
        try:
            btn_dict = func.AdminButtons(message.chat.id)
            func.admin_buttons_dict[message.chat.id] = btn_dict
            btn_dict = func.admin_buttons_dict[message.chat.id]
            btn_dict.name = message.text

            msg = bot.send_message(
                chat_id=message.chat.id,
                text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')

            bot.register_next_step_handler(msg, admin_buttons_add2)

        except Exception as e:
            pass
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def admin_buttons_add2(message):
        try:
            btn_dict = func.admin_buttons_dict[message.chat.id]
            btn_dict.info = message.text

            msg = bot.send_message(
                chat_id=message.chat.id,
                text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')

            bot.register_next_step_handler(msg, admin_buttons_add3)

        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    
    def admin_buttons_add3(message):
        try:
            btn_dict = func.admin_buttons_dict[message.chat.id]
            btn_dict.photo = str(random.randint(11111, 99999))

            file_info = bot.get_file(message.photo[len(message.photo)-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(f'{btn_dict.photo}.jpg', 'wb') as new_file:
                new_file.write(downloaded_file)

            msg = bot.send_message(
                chat_id=message.chat.id,
                text='–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ +')

            bot.register_next_step_handler(msg, admin_buttons_add4)

        except Exception as e:
            pass
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def admin_buttons_add4(message):
        try:
            btn_dict = func.admin_buttons_dict[message.chat.id]

            func.admin_add_btn(btn_dict.name, btn_dict.info, btn_dict.photo)

            bot.send_message(
                chat_id=message.chat.id,
                text='–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',
                reply_markup=menu.admin_menu)

        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def admin_buttons_del(message):
        try:
            func.admin_del_btn(message.text)

            bot.send_message(
                chat_id=message.chat.id,
                text='–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞',
                reply_markup=menu.admin_menu)

        except Exception as e:
            print(e)
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def admin_numbers_set_price(message):
        try:
            set_price = func.Admin_set_price(message.chat.id)
            func.admin_set_price[message.chat.id] = set_price
            set_price = func.admin_set_price[message.chat.id]
            
            info = func.get_countries_list(int(message.text))

            set_price.service = info[0]

            msg = bot.send_message(
                chat_id=message.chat.id,
                text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É:\n\n{info[1]}'
            )
            bot.register_next_step_handler(msg, admin_numbers_set_price_2)
        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def admin_numbers_set_price_2(message):
        try:
            set_price = func.admin_set_price[message.chat.id]
            set_price.country = int(message.text)

            msg = bot.send_message(
                chat_id=message.chat.id,
                text=f'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É'
            )
            bot.register_next_step_handler(msg, admin_numbers_set_price_3)

        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


    def admin_numbers_set_price_3(message):
        try:
            set_price = func.admin_set_price[message.chat.id]
            set_price.price = float(message.text)

            if func.change_price_number(set_price) == True:
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {set_price.price} ‚ÇΩ',
                    reply_markup=menu.admin_numbers
                )
        except Exception as e:
            bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    
    
    threading.Thread(target=sending_check).start()

    bot.polling(none_stop=True)
    


start_bot()
